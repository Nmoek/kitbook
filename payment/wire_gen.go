// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"kitbook/payment/events"
	"kitbook/payment/grpc"
	"kitbook/payment/ioc"
	"kitbook/payment/repository"
	"kitbook/payment/repository/cache"
	"kitbook/payment/repository/dao"
	"kitbook/payment/web"
)

// Injectors from wire.go:

func InitApp() *App {
	wechatConfig := ioc.InitWechatConfig()
	client := ioc.InitWechatClient(wechatConfig)
	logger := ioc.InitLogger()
	db := ioc.InitDB(logger)
	paymentDao := dao.NewGormPaymentDao(db)
	paymentRepository := repository.NewNativePaymentRepository(paymentDao)
	saramaClient := ioc.InitSaramaClient()
	syncProducer := ioc.InitSyncProducer(saramaClient)
	saramaSyncProducer := events.NewSaramaSyncProducer(syncProducer)
	nativePaymentService := ioc.InitWechatNativeService(client, paymentRepository, saramaSyncProducer, logger, wechatConfig)
	nativePaymentServiceServer := grpc.NewPaymentServiceServer(nativePaymentService)
	server := ioc.InitGRpcServer(nativePaymentServiceServer, logger)
	handler := ioc.InitWechatNotifyHandler(wechatConfig)
	weChatNativeHandler := web.NewWeChatNativeHandler(handler, nativePaymentService, logger)
	engine := ioc.InitWebServer(weChatNativeHandler)
	cmdable := ioc.InitRedis()
	rlockClient := ioc.InitRlockClient(cmdable)
	syncWechatOrderJob := ioc.InitSyncWechatOrderJob(nativePaymentService, rlockClient, logger)
	cron := ioc.InitJobs(logger, syncWechatOrderJob)
	app := &App{
		rpcServer: server,
		webServer: engine,
		corn:      cron,
	}
	return app
}

// wire.go:

var thirdPartySet = wire.NewSet(ioc.InitDB, ioc.InitRedis, ioc.InitLogger, ioc.InitSaramaClient, ioc.InitWechatClient, ioc.InitWechatConfig, ioc.InitWechatNotifyHandler, ioc.InitJobs, ioc.InitSyncWechatOrderJob, ioc.InitRlockClient, ioc.InitSyncProducer)

var paymentSvcSet = wire.NewSet(dao.NewGormPaymentDao, cache.NewRedisPaymentCache, repository.NewNativePaymentRepository, ioc.InitWechatNativeService)
