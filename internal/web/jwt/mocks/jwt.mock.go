// Code generated by MockGen. DO NOT EDIT.
// Source: D:./internal/web/jwt/types.go
//
// Generated by this command:
//
//	mockgen.exe -source=D:./internal/web/jwt/types.go -package=jwtmocks -destination=./internal/web/jwt/mocks/jwt.mock.go
//
// Package jwtmocks is a generated GoMock package.
package jwtmocks

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockJWTHandler is a mock of JWTHandler interface.
type MockJWTHandler struct {
	ctrl     *gomock.Controller
	recorder *MockJWTHandlerMockRecorder
}

// MockJWTHandlerMockRecorder is the mock recorder for MockJWTHandler.
type MockJWTHandlerMockRecorder struct {
	mock *MockJWTHandler
}

// NewMockJWTHandler creates a new mock instance.
func NewMockJWTHandler(ctrl *gomock.Controller) *MockJWTHandler {
	mock := &MockJWTHandler{ctrl: ctrl}
	mock.recorder = &MockJWTHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTHandler) EXPECT() *MockJWTHandlerMockRecorder {
	return m.recorder
}

// CheckSsid mocks base method.
func (m *MockJWTHandler) CheckSsid(ctx *gin.Context, ssid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSsid", ctx, ssid)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckSsid indicates an expected call of CheckSsid.
func (mr *MockJWTHandlerMockRecorder) CheckSsid(ctx, ssid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSsid", reflect.TypeOf((*MockJWTHandler)(nil).CheckSsid), ctx, ssid)
}

// ClearToken mocks base method.
func (m *MockJWTHandler) ClearToken(ctx *gin.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearToken", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearToken indicates an expected call of ClearToken.
func (mr *MockJWTHandlerMockRecorder) ClearToken(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearToken", reflect.TypeOf((*MockJWTHandler)(nil).ClearToken), ctx)
}

// ExtractToken mocks base method.
func (m *MockJWTHandler) ExtractToken(ctx *gin.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractToken", ctx)
	ret0, _ := ret[0].(string)
	return ret0
}

// ExtractToken indicates an expected call of ExtractToken.
func (mr *MockJWTHandlerMockRecorder) ExtractToken(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractToken", reflect.TypeOf((*MockJWTHandler)(nil).ExtractToken), ctx)
}

// SetJWTToken mocks base method.
func (m *MockJWTHandler) SetJWTToken(ctx *gin.Context, id int64, ssid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetJWTToken", ctx, id, ssid)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetJWTToken indicates an expected call of SetJWTToken.
func (mr *MockJWTHandlerMockRecorder) SetJWTToken(ctx, id, ssid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetJWTToken", reflect.TypeOf((*MockJWTHandler)(nil).SetJWTToken), ctx, id, ssid)
}

// SetTokenWithSsid mocks base method.
func (m *MockJWTHandler) SetTokenWithSsid(ctx *gin.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTokenWithSsid", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTokenWithSsid indicates an expected call of SetTokenWithSsid.
func (mr *MockJWTHandlerMockRecorder) SetTokenWithSsid(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTokenWithSsid", reflect.TypeOf((*MockJWTHandler)(nil).SetTokenWithSsid), ctx, id)
}
