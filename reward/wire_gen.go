// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"kitbook/reward/events"
	"kitbook/reward/grpc"
	"kitbook/reward/ioc"
	"kitbook/reward/repository"
	"kitbook/reward/repository/cache"
	"kitbook/reward/repository/dao"
	"kitbook/reward/service"
)

// Injectors from wire.go:

func InitApp() *App {
	logger := ioc.InitLogger()
	db := ioc.InitDB(logger)
	rewardDao := dao.NewGormRewardDao(db)
	cmdable := ioc.InitRedis()
	rewardCache := cache.NewRedisRewardCache(cmdable)
	rewardRepository := repository.NewWechatNativeRewardRepository(rewardDao, rewardCache)
	client := ioc.InitEtcd()
	paymentServiceClient := ioc.InitPaymentClient(client)
	accountServiceClient := ioc.InitAccountClient(client)
	rewardService := service.NewWechatNativeRewardService(rewardRepository, paymentServiceClient, accountServiceClient, logger)
	saramaClient := ioc.InitSaramaClient()
	paymentEventConsumer := events.NewPaymentEventConsumer(rewardService, saramaClient, logger)
	v := ioc.InitConsumers(paymentEventConsumer)
	rewardServiceServer := grpc.NewRewardServiceServer(rewardService)
	server := ioc.InitGRpcServer(rewardServiceServer, logger)
	app := &App{
		consumers: v,
		rpcServer: server,
	}
	return app
}

// wire.go:

var thirdPartySet = wire.NewSet(ioc.InitDB, ioc.InitRedis, ioc.InitLogger, ioc.InitConsumers, ioc.InitSaramaClient, ioc.InitEtcd, ioc.InitPaymentClient, ioc.InitAccountClient)

var rewardSvcSet = wire.NewSet(dao.NewGormRewardDao, cache.NewRedisRewardCache, repository.NewWechatNativeRewardRepository, service.NewWechatNativeRewardService)
